// java
class Solution {
    public List<List<Integer>> combinationSum2(int[] cand, int target) {
        Arrays.sort(cand);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        dfs_com(cand, 0, target, path, res);
        return res;
    }
    void dfs_com(int[] cand, int cur, int target, List<Integer> path, List<List<Integer>> res) {
        if (target == 0) {
            res.add(new ArrayList(path));
            return ;
        }
        if (target < 0) return;
        for (int i = cur; i < cand.length; i++){
            if (i > cur && cand[i] == cand[i-1]) continue;
            path.add(path.size(), cand[i]);
            dfs_com(cand, i+1, target - cand[i], path, res);
            path.remove(path.size()-1);
        }
    }
}

// c++
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> tmp;
        sort(candidates.begin(), candidates.end());
        helper(candidates, res, tmp, target, 0);
        return res;
    }
    
    void helper(vector<int>& nums, vector<vector<int>>& res, vector<int>& tmp, int target, int idx) {
        if(target < 0) return;
        if(target == 0) {
            res.push_back(tmp);
            return;
        }
        if(idx == nums.size()) return;
        for(int i=idx; i<nums.size(); i++) {
            if(i>idx && nums[i] == nums[i-1]) continue;
            tmp.push_back(nums[i]);
            helper(nums, res, tmp, target-nums[i], i+1);
            tmp.pop_back();
        }
    }
};

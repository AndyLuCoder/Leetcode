// Java BFS
class Pair {
    int pos, sp, move;
    Pair(int pos, int sp, int move) {
        this.pos = pos;
        this.sp = sp;
        this.move = move;
    }
}
class Solution {
    public int racecar(int target) {
        Queue<Pair> que = new LinkedList<>();
        que.add(new Pair(0, 1, 0));
        
        while(!que.isEmpty()) {
            Pair pair = que.poll();
            int pos = pair.pos;
            int sp = pair.sp;
            int move = pair.move;
            if(pos == target) return move;
            que.add(new Pair(pos+sp, sp*2, move+1));

            if((pos+sp>target && sp > 0) || (pos+sp<target && sp < 0)) {
                que.add(new Pair(pos, sp>0 ? -1 : 1, move+1));
            }
        }
        return 0;
    }
}

// Java Top Down DP
public int racecar(int target) {
    int[] dp = new int[target + 1];
    Arrays.fill(dp, 1, dp.length, -1);
    return racecar(target, dp);
}

private int racecar(int i, int[] dp) {
    if (dp[i] >= 0) {
        return dp[i];
    }
    
    dp[i] = Integer.MAX_VALUE;
    
    int m = 1, j = 1;
    
    for (; j < i; j = (1 << ++m) - 1) {
        for (int q = 0, p = 0; p < j; p = (1 << ++q) - 1) {
            dp[i] = Math.min(dp[i],  m + 1 + q + 1 + racecar(i - (j - p), dp));
        }
    }
    
    dp[i] = Math.min(dp[i], m + (i == j ? 0 : 1 + racecar(j - i, dp)));
    
    return dp[i];
}

// Java Bottom Up DP
public int racecar(int target) {
    int[] dp = new int[target + 1];
    
    for (int i = 1; i <= target; i++) {
        dp[i] = Integer.MAX_VALUE;
        
        int m = 1, j = 1;
        
        for (; j < i; j = (1 << ++m) - 1) {
            for (int q = 0, p = 0; p < j; p = (1 << ++q) - 1) {
                dp[i] = Math.min(dp[i], m + 1 + q + 1 + dp[i - (j - p)]);
            }
        }
        
        dp[i] = Math.min(dp[i], m + (i == j ? 0 : 1 + dp[j - i]));
    }
    
    return dp[target];
}

// java
class Solution {
    public boolean canJump(int[] nums) {
        int curSum = 0, maxRange = 0;
        for(int i=0; i<nums.length-1; i++) {
            maxRange = Math.max(maxRange, i+nums[i]);
            if(i > curSum) return false;
            else if(i == curSum) {
                curSum = maxRange;
            }
        }
        return maxRange >= nums.length-1;
    }
}

// c++
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int curSum = 0, maxRange = 0;
        for(int i=0; i<nums.size()-1; i++) {
            maxRange = max(maxRange, i+nums[i]);
            if(i > curSum) return false;
            else if(i == curSum) {
                curSum = maxRange;
            }
        }
        return maxRange >= nums.size()-1;
    }
};

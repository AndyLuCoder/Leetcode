class Solution {
public:
    long long maxPoints(vector<vector<int>>& points) {
        int m = points.size(), n = points[0].size();
        vector<vector<long long>> dp(m, vector<long long>(n, -1));
        for(int i=0; i<n; i++) {
            dp[0][i] = points[0][i];
        }
        
        for(int i=1; i<m; i++) {
            vector<long long> left_dp(n, -1);
            vector<long long> right_dp(n, -1);
            
            left_dp[0] = dp[i-1][0];
            for(int j=1; j<n; j++) {
                left_dp[j] = max(left_dp[j-1], dp[i-1][j] + j);
            }
            
            right_dp.back() = dp[i-1].back() - n + 1;
            for(int j=n-2; j>=0; j--) {
                right_dp[j] = max(right_dp[j+1], dp[i-1][j]-j);
            }
            
            for (int k = 0; k < n; k++) {
                dp[i][k] = max(left_dp[k] - k, right_dp[k] + k) + points[i][k];
            }
        }
        
        long long res = -1;
        for (const auto v : dp.back()) {
            res = max(res, v);
        }
        
        return res;
    }
};


// dp[i][j] = max(dp[i-1][j] + dp[i][k] - abs(k-j))
    
//            max(dp[i-1][j] + dp[i][k] - k + j)
//            max(dp[i-1][j] + dp[i][k] + k - j)

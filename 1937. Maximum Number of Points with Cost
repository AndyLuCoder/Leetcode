#method 1:
class Solution {
public:
    long long maxPoints(vector<vector<int>>& points) {
        int m = points.size(), n = points[0].size();
        vector<vector<long long>> dp(m, vector<long long>(n, -1));
        for(int i=0; i<n; i++) {
            dp[0][i] = points[0][i];
        }
        
        for(int i=1; i<m; i++) {
            long long left_dp = LLONG_MIN;
            long long right_dp = LLONG_MIN;
            
            for(int j=0; j<n; j++) {
                left_dp = max(left_dp, dp[i-1][j] + j);
                dp[i][j] = max(dp[i][j], left_dp + points[i][j] - j);
            }
            
            for(int j=n-1; j>=0; j--) {
                right_dp = max(right_dp, dp[i-1][j] - j);
                dp[i][j] = max(dp[i][j], right_dp + points[i][j] + j );
            }
        }
        
        long long res = LLONG_MIN;
        for (const auto v : dp.back()) {
            res = max(res, v);
        }
        
        return res;
    }
};

// dp[i][j] = max(dp[i-1][k] + points[i][j] - abs(j-k))
// if (j > k) -> max(dp[i-1][k] + points[i][j] - j + k); -> max(dp[i][k-1], dp[i-1][k] + k) 
// if (j < k) -> max(dp[i-1][k] + points[i][j] + j - k);


#method 2:
class Solution {
public:
    long long maxPoints(vector<vector<int>>& points) {
        int m = points.size(), n = points[0].size();
        vector<vector<long long>> dp(m, vector<long long>(n, -1));
        for(int i=0; i<n; i++) {
            dp[0][i] = points[0][i];
        }
        
        for(int i=1; i<m; i++) {
            vector<long long> left_dp(n, -1);
            vector<long long> right_dp(n, -1);
            
            left_dp[0] = dp[i-1][0];
            for(int k=1; k<n; k++) {
                left_dp[k] = max(left_dp[k-1], dp[i-1][k] + k);
            }
            
            right_dp.back() = dp[i-1].back() - n + 1;
            for(int k=points[i].size()-2; k>=0; k--) {
                right_dp[k] = max(right_dp[k+1], dp[i-1][k]-k);
            }
            
            for (int j = 0; j < n; j++) {
                dp[i][j] = max(left_dp[j] - j, right_dp[j] + j) + points[i][j];
            }
        }
        
        long long res = -1;
        for (const auto v : dp.back()) {
            res = max(res, v);
        }
        
        return res;
    }
};

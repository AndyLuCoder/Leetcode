// java
class Solution {
    public int jump(int[] nums) {
        int jumps = 0, curEnd = 0, curFarthest = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            curFarthest = Math.max(curFarthest, i + nums[i]);
            if (i == curEnd) {
                jumps++;
                curEnd = curFarthest;
            }
        }
        return jumps;
    }
}

// c++
class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size(), curEnd = 0, maxRange=0, jumps = 0;
        for(int i=0; i<n-1; i++) {
            maxRange = max(maxRange, i+nums[i]);
            if(curEnd == i) {
                jumps++;
                curEnd = maxRange;
            }
            if(curEnd < i) return -1;
        }
        if(curEnd < n-1) return -1;
        return jumps;
    }
};

// c++
class Solution {
public:
    int knightDialer(int n) {
        int res = 0, M = 1e9 + 7;
        vector<vector<int>> memo(n + 1, vector<int>(10));
        vector<vector<int>> path{{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 9}, {4, 2}};
        for (int i = 0; i < 10; ++i) {
        	res = (res + helper(n - 1, i, path, memo)) % M;
        }
        return res;
    }
    
    int helper(int n, int cur, vector<vector<int>>& path, vector<vector<int>>& memo) {
    	if (n == 0) return 1;
    	if (memo[n][cur] != 0) return memo[n][cur];
    	int res = 0, M = 1e9 + 7;
    	for (int idx : path[cur]) {
    		res = (res + helper(n - 1, idx, path, memo)) % M;
    	}
    	return memo[n][cur] = res;
    }
};

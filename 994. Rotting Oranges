// java
class Solution {
    public int orangesRotting(int[][] grid) {
        //bfs, 1 find all rotten == 2
        //put 2 into a queue
        //each time poll 2 then go four directions, if next is 1, change to 2, put back to queue
        //if queue is empty, check if there is still 1
        
        Queue<int[]> qu = new LinkedList<>();
        
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) {
                    qu.offer(new int[]{i, j});
                }
            }
        }
        
        int[][] direction = {{1,0}, {0,1}, {0,-1}, {-1, 0}};
        
        int level = 0;
        while (!qu.isEmpty()) {
            level++;
            int size = qu.size();
            for (int i = 0; i < size; i++) {
                int[] rotten = qu.poll();
                for (int[] dir : direction) {
                    int nx = dir[0] + rotten[0];
                    int ny = dir[1] + rotten[1];
                    
                    if (nx < 0 || ny < 0 || nx >= grid.length || ny >= grid[0].length || grid[nx][ny] != 1)
                        continue;
                    
                    grid[nx][ny] = 2;
                    qu.offer(new int[]{nx, ny});
                }        
            }
        }
        
        for (int[] x : grid) {
            for (int y : x) {
                if (y == 1)
                    return -1;
            }
        }

        return level == 0 ? 0 : level - 1;
    }
}

// c++
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int res = 0, m = grid.size(), n = grid[0].size(), freshLeft = 0;
        queue<vector<int>> q;
        vector<vector<int>> dirs{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) ++freshLeft;
                else if (grid[i][j] == 2) q.push({i, j});
            }
        }
        while (!q.empty() && freshLeft > 0) {
            for (int i = q.size(); i > 0; --i) {
                auto cur = q.front(); q.pop();
                for (int k = 0; k < 4; ++k) {
                    int x = cur[0] + dirs[k][0], y = cur[1] + dirs[k][1];
                    if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] != 1) continue;
                    grid[x][y] = 2;
                    q.push({x, y});
                    --freshLeft;
                }
            }
            ++res;
        }
        return freshLeft > 0 ? -1 : res;
    }
};

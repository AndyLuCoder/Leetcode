// c++
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        vector<vector<string>> res;
        unordered_map<string, string> root;
        unordered_map<string, string> owner;
        unordered_map<string, set<string>> family;
        
        for(auto account : accounts) {
            for(int i=1; i<account.size(); i++) {
                root[account[i]] = account[i];
                owner[account[i]] = account[0];
            }
        }
        
        for(auto account : accounts) {
            string par = find(account[1], root);
            for(int i=2; i<account.size(); i++) {
                root[find(account[i], root)] = par;
            }
        }
        
        for(auto account : accounts) {
            for(int i=1; i<account.size(); i++) {
                family[find(account[i], root)].insert(account[i]);
            }
        }
        
        for(auto a : family) {
            vector<string> vec(a.second.begin(), a.second.end());
            vec.insert(vec.begin(), owner[a.first]);
            res.push_back(vec);
        }
        
        return res;
    }
    
    string find(string str, unordered_map<string, string>& root) {
        return root[str] == str ? str : find(root[str], root);
    }
};

// c++
class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        if (heights.empty() || heights[0].empty()) return {};
        int m = heights.size(), n = heights[0].size();
        vector<vector<int>> pacific(m, vector<int>(n, -1));
        vector<vector<int>> atlantic(m, vector<int>(n, -1));
        
        vector<vector<int>> res;
        queue<pair<int, int>> q1;  // pacific
        queue<pair<int, int>> q2; // atlantic
        
        for(int i=0; i<m; i++) {
            q1.push({i, 0});
            q2.push({i, n-1});
            pacific[i][0] = 1;
            atlantic[i][n-1] = 1;
        }
        
        for(int j=0; j<n; j++) {
            q1.push({0, j});
            q2.push({m-1, j});
            pacific[0][j] = 1;
            atlantic[m-1][j] = 1;
        }
        
        bfs(heights, q1, pacific);
        bfs(heights, q2, atlantic);
        
        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(pacific[i][j] == 1 && atlantic[i][j] == 1) {
                    // vector<int> tmp;
                    // tmp.push_back(i);
                    // tmp.push_back(j);
                    // res.push_back(tmp);
                    vector<int> tmp = {i, j};
                    res.push_back(tmp);
                }
            }
        }
        
        return res;
    }
    
private:
    void bfs(vector<vector<int>>& heights, queue<pair<int, int>>& que, vector<vector<int>>& visited) {
        int m = heights.size(), n = heights[0].size();
        vector<vector<int>> dirs{{0,-1},{-1,0},{0,1},{1,0}};
        while(!que.empty()) {
            auto cur = que.front(); que.pop();
            for(auto dir : dirs) {
                int x = cur.first + dir[0];
                int y = cur.second + dir[1];
                if(x<0 || x>=m || y<0 || y>=n || visited[x][y] == 1 || heights[cur.first][cur.second] > heights[x][y])
                    continue;
                visited[x][y] = 1;
                que.push({x, y});
            }
        }
    }    
};

class Solution {
public:
    bool sequenceReconstruction(vector<int>& org, vector<vector<int>>& seqs) {
        int n = org.size();
        vector<vector<int>> graph(n+1);
        vector<int> degree(n+1);
        unordered_set<int> values;
        
        for(auto &seq : seqs) {
            for(int i=1; i<seq.size(); i++) {
                int sc = seq.at(i-1), dest = seq.at(i);
                if(sc > org.size() || dest > org.size()) return false;
                values.insert(sc);
                values.insert(dest);
                graph[sc].push_back(dest);
                degree[dest]++;
            }
            if(!seq.empty() && seq.size() == 1) {
                int sc = seq.at(0);
                values.insert(sc);
            }
        }
        
        if(!checkIfValid(values, org.size())) return false;
        
        queue<int> que;
        for(int i=1; i<=org.size(); i++) {
            if(degree.at(i) == 0)
                que.push(i);
        }
        
        int countNode = 0;
        while(!que.empty()) {
            if(que.size() != 1) return false;
            int node = que.front(); que.pop();
            if(org.at(countNode) != node) return false;
            countNode++;
            for(int &nei : graph[node]) {
                if(--degree[nei] == 0) {
                    que.push(nei);
                }
            }
        }
        
        return countNode == org.size();
    }
    
    bool checkIfValid(unordered_set<int> &values, int n){
        for(int i = 1; i <= n; i++)
            if(values.find(i) == values.end()) return false;        
        
        return values.size() == n;
    }
};

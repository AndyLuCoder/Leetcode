class Solution {
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        int kMod = 1e9 + 7;
        vector<vector<pair<int,int>>> graph(n+1);
        for(auto &e : edges) {
            graph[e[0]].push_back({e[1], e[2]});
            graph[e[1]].push_back({e[0], e[2]});
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> pq;
        vector<int> dist(n+1, INT_MAX);
        vector<int> dp(n+1);
        dist[n] = 0;
        dp[n] = 1;
        pq.push({0, n});
        
        while(!pq.empty()) {
            auto[d, u] = pq.top(); pq.pop();
            if(d > dist[u]) continue;
            if(u == 1) break;
            for(auto &[v, w] : graph[u]) {
                if(dist[v] > dist[u] + w) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
                if(dist[v] > dist[u]) {
                    dp[v] = (dp[v] + dp[u]) % kMod;
                }
            }
        }
        
        return dp[1];
    }
};

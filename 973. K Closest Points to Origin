// java
class Solution {
    public int[][] kClosest(int[][] points, int K) {
        int len =  points.length, l = 0, r = len - 1;
        while (l <= r) {
            int mid = helper(points, l, r);
            if (mid == K) break;
            if (mid < K) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return Arrays.copyOfRange(points, 0, K);
    }

    private int helper(int[][] A, int l, int r) {
        int[] pivot = A[l];
        while (l < r) {
            while (l < r && compare(A[r], pivot) >= 0) r--;
            A[l] = A[r];
            while (l < r && compare(A[l], pivot) <= 0) l++;
            A[r] = A[l];
        }
        A[l] = pivot;
        return l;
    }

    private int compare(int[] p1, int[] p2) {
        return p1[0] * p1[0] + p1[1] * p1[1] - p2[0] * p2[0] - p2[1] * p2[1];
    }
}

// c++
class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        int L = 0, R = size(points)-1, p = size(points);
        while(p != k) {
            p = partition(points, L, R);
            if(p < k)   L = p + 1;
            else        R = p - 1;
        }
        points.resize(k);
        return points;
    }
    
    int partition(vector<vector<int>>& P, int L, int R) {
		auto euclidean = [](auto& p) { return p[0] * p[0] + p[1] * p[1]; };
        srand(time(0));
        swap(P[R], P[L + rand() % (R-L+1)]);       // choose a random pivot and swap with last element. Then partition with last element as pivot
        int i = L, pivotDist = euclidean(P[R]);
        for(int j = L; j <= R; j++) 
            if(euclidean(P[j]) <= pivotDist)       // move all points having less distance to the left
                swap(P[i++], P[j]);
        return i-1;                                // returns final position of pivot after partition
    }
};

// Java
class Solution {
    public int numRollsToTarget(int n, int k, int target) {
        int MOD = (int)Math.pow(10, 9) + 7;
        long[][] dp = new long[n + 1][target + 1];
        dp[0][0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= target; j++) {
                for (int h = 1; h <= k; h++) {
                    if (j >= h) {
                        dp[i][j] = (dp[i][j] + dp[i - 1][j - h]) % MOD;
                    } else {
                        break;
                    }
                }
            }
        }
        return (int)dp[n][target];
    }
}

// C++
class Solution {
public:
    int numRollsToTarget(int d, int f, int target) {
        int M = 1e9 + 7;
        vector<int> dp(target + 1);
        dp[0] = 1;
        for (int i = 1; i <= d; ++i) {
            vector<int> t(target + 1);
            for (int j = 1; j <= f; ++j) {
                for (int k = j; k <= target; ++k) {
                    t[k] = (t[k] + dp[k - j]) % M;
                }
            }
            swap(dp, t);
        }
        return dp[target];
    }
};

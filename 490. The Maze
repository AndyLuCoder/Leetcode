class Solution {
public:
    vector<int> dirs = {1, 0, -1, 0, 1};
    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        queue<vector<int>> que;
        vector<vector<bool>> seen{maze.size(), vector<bool>(maze[0].size(), false)};
        que.push({start[0], start[1]});
        while(!que.empty()) {
            int sz = que.size();
            while(sz-- > 0) {
                auto cur = que.front(); que.pop();
                if(cur == destination) return true;
                int x = cur[0], y = cur[1];
                for(int i=0; i<dirs.size()-1; i++) {
                    int x1 = x, y1 = y;
                    while(isValid(maze, x1, y1)) {
                        x1 += dirs[i], y1 += dirs[i+1];
                    }
                    x1 -= dirs[i], y1 -= dirs[i+1];
                    if(seen[x1][y1] == false) {
                        que.push({x1, y1});
                        seen[x1][y1] = true;
                    }
                }
            }
            
        }
        return false;
    }
    
private:
    bool isValid(vector<vector<int>>& maze, int x, int y) {
        return x >= 0 && x < maze.size() &&
               y >= 0 && y < maze.at(x).size() &&
               maze.at(x).at(y) == 0;
    }
};

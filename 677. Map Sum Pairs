class Node {
public:
    Node* children[26];
    int count;
    bool isWord;
    Node() {
        count = 0;
        isWord = false;
        for(auto & child : children) {
            child = NULL;
        }
    }
};

class MapSum {
public:
    MapSum() {
        root = new Node();
    }
    
    void insert(string key, int val) {
        Node* p = root;
        for(auto & k : key) {
            int idx = k - 'a';
            if(p -> children[idx] == NULL) {
                p -> children[idx] = new Node();
            }
            p = p -> children[idx];
        }
        p -> isWord = true;
        p -> count = val;
    }
    
    int sum(string prefix) {
        Node* p = root;
        int res = 0;
        for(auto & pre : prefix) {
            int idx = pre - 'a';
            if(p -> children[idx] == NULL) return 0;
            p = p -> children[idx];
        }
        return search(p);
    }
    
    int search(Node* cur) {
        if(cur == NULL) return 0;
        int res = 0;
        if(cur -> isWord) {
            res += cur -> count;
        }
        for(int i=0; i<26; i++) {
            if(cur -> children[i] == NULL) continue;
            else {
                res += search(cur -> children[i]);
            }
        }
        return res;
    }
    
private:
    Node* root;
};

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum* obj = new MapSum();
 * obj->insert(key,val);
 * int param_2 = obj->sum(prefix);
 */

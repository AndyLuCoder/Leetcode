class Solution {
public:
    int minimumSemesters(int n, vector<vector<int>>& relations) {
        vector<vector<int>> graph(n+1);
        vector<int> degree(n+1);
        for(auto & e : relations) {
            graph[e[0]].push_back(e[1]);
            degree[e[1]]++;
        }
        
        queue<int> que;
        int classCount = 0;
        for(int i=1; i<=n; i++) {
            if(degree[i] == 0) {
                que.push(i);
                classCount++;
            }
        }
        
        int semester = 0;
        while(!que.empty()) {
            semester++;
            int sz = que.size();
            while(sz-- > 0) {
                auto cur = que.front(); que.pop();
                for(auto &next : graph[cur]) {
                    if(--degree[next] == 0) {
                        que.push(next);
                        classCount++;
                    }
                }
            }
        }
        
        return classCount == n ? semester : -1;
    }
};

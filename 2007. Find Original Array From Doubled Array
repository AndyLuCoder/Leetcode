// java
class Solution {
    public int[] findOriginalArray(int[] A) {
        int n = A.length, i = 0;
        if (n % 2 == 1) return new int[0];
        int[] res = new int[n / 2];
        Map<Integer, Integer> count = new TreeMap<>();
        for (int a : A)
            count.put(a, count.getOrDefault(a, 0) + 1);
        for (int x : count.keySet()) {
            if (count.get(x) > count.getOrDefault(x + x, 0))
                return new int[0];
            for (int j = 0; j < count.get(x); ++j) {
                res[i++] = x;
                count.put(x + x, count.get(x + x) - 1);
            }
        }
        return res;
    }
}

// c++
class Solution {
public:
    vector<int> findOriginalArray(vector<int>& changed) {
        int n = changed.size(), i = 0;
        if(n%2 == 1) return {};
        vector<int>res(n/2);
        map<int, int> mp;
        for(auto a : changed) {
            if(!mp.count(a)) mp[a] = 0;
            mp[a] += 1;
        }
        for(auto & x : mp) {
            if(x.second > (mp.count(2*(x.first)) ? mp[2*(x.first)] : 0))
                return {};
            for(int j=0; j<x.second; ++j) {
                res[i++] = x.first;
                mp[2*(x.first)] = mp[2*(x.first)] - 1;
            }
        }
        return res;
    }
};

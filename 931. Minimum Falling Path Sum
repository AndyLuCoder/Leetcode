// Java
class Solution {
    public int minFallingPathSum(int[][] A) {
        for (int i = 1; i < A.length; ++i)
          for (int j = 0; j < A.length; ++j)
            A[i][j] += Math.min(A[i - 1][j], Math.min(A[i - 1][Math.max(0, j - 1)], A[i - 1][Math.min(A.length - 1, j + 1)]));
        return Arrays.stream(A[A.length - 1]).min().getAsInt();
    }
}

// c++
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        for (auto i = 1; i < A.size(); ++i)
            for (auto j = 0; j < A.size(); ++j)
                A[i][j] += min({A[i-1][j], A[i-1][max(0,j-1)], A[i-1][min((int)A.size()-1,j+1)]});
        return *min_element(begin(A[A.size() - 1]), end(A[A.size() - 1]));
    }
};

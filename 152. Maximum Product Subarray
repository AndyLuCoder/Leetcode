// java
// v1:
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if(nums.empty()) return 0;
        int res = nums[0], mn = nums[0], mx = nums[0];
        for(int i=1; i<nums.size(); i++) {
            int tmax = mx, tmin = mn;
            mx = max(max(nums[i], tmax*nums[i]), tmin*nums[i]);
            mn = min(min(nums[i], tmax*nums[i]), tmin*nums[i]);
            res = max(res, mx);
        }
        return res;
    }
};

// v2:
class Solution {
    public int maxProduct(int[] nums) {
        int maxSum = nums[0];
        int currentMax = nums[0];
        int currentMin = nums[0];

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] < 0){
                int tmp = currentMax;
                currentMax = currentMin;
                currentMin = tmp;
            }

            currentMax = Math.max(nums[i], currentMax * nums[i]);
            currentMin = Math.min(nums[i], currentMin * nums[i]);
            maxSum = Math.max(maxSum, currentMax);
        }
        return maxSum;
    }
}


// c++
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int minVal = nums[0], maxVal = nums[0];
        int res = nums[0];
        
        for(int i=1; i<nums.size(); i++) {
            int preMin = minVal, preMax = maxVal;
            minVal = min(nums[i], min(preMin*nums[i], preMax*nums[i]));
            maxVal = max(nums[i], max(preMin*nums[i], preMax*nums[i]));
            res = max(res, max(minVal, maxVal));
        }
        
        return res;
    }
};

// java
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
    
        ListNode start = new ListNode(0);
        ListNode slow = start, fast = start;
        slow.next = head;

        //Move fast in front so that the gap between slow and fast becomes n
        for(int i=1; i<=n+1; i++)   {
            fast = fast.next;
        }
        //Move fast to the end, maintaining the gap
        while(fast != null) {
            slow = slow.next;
            fast = fast.next;
        }
        //Skip the desired node
        slow.next = slow.next.next;
        return start.next;
    }
}

// c++
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* pre = head;
        ListNode* cur = head;
        for(int i=0; i<n; i++) {
            cur = cur->next;
        }
        if (!cur) return head->next;
        while(cur && cur->next) {
            pre = pre->next;
            cur = cur->next;
        }
        ListNode* to_be_deleted = pre->next;
        pre->next = pre->next->next;
        delete to_be_deleted;
        return head;
    }
};

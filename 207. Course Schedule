public bool CanFinish(int numCourses, int[][] prerequisites) {
        HashSet<int>[] graph = new HashSet<int>[numCourses];
        int[] degree = new int[numCourses];
        int count = 0;
        for(int i=0; i<numCourses; i++) {
            graph[i] = new HashSet<int>();
        }
        foreach(var p in prerequisites) {
            graph[p[1]].Add(p[0]);
            degree[p[0]]++;
        }
        
        Queue<int> que = new Queue<int>();
        for(int i=0; i<numCourses; i++) {
            if(degree[i] == 0) que.Enqueue(i);
        }
        if(que.Count == 0) return false;
        
        while(que.Any()) {
            int sz = que.Count;
            while(sz-- > 0) {
                var cur = que.Dequeue();
                count++;
                foreach(var next in graph[cur]) {
                    if(--degree[next] == 0) {
                            que.Enqueue(next);
                        }
                }
            }
        }
        
        return count == numCourses ? true : false;
    }

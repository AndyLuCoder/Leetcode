// java
class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        List<int[]> res = new ArrayList();
        for (int i = 0, j = 0; i < A.length && j < B.length; ) {
            int start = Math.max(A[i][0], B[j][0]);
            int end = Math.min(A[i][1], B[j][1]);
            if (start <= end)
                res.add(new int[]{start, end});
            if (A[i][1] < B[j][1])
                ++i;
            else
                ++j;
        }
        return res.toArray(new int[0][]);
    }
}

// c++
class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        vector<vector<int>> res;
        for(int i=0, j=0; i<A.size() && j<B.size(); ) {
            int start = max(A[i][0], B[j][0]);
            int end = min(A[i][1], B[j][1]);
            if(start <= end)
                res.push_back({start, end});
            if(A[i][1] < B[j][1]) ++i;
            else ++j;
        }
        return res;
    }
};

// c++
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> tmp, seen(nums.size(), 0);
        sort(nums.begin(), nums.end());
        helper(nums, res, tmp, seen);
        return res;
    }
    
    void helper(vector<int>& nums, vector<vector<int>>& res, vector<int>& tmp, vector<int>& seen) {
        if(tmp.size() == nums.size()) {
            res.push_back(tmp);
            return;
        }
        for(int i=0; i<nums.size(); i++) {
            if(seen[i] == 1) continue;
            if(i>0 && nums[i] == nums[i-1] && seen[i-1] == 0) continue;
            seen[i] = 1;
            tmp.push_back(nums[i]);
            helper(nums, res, tmp, seen);
            seen[i] = 0;
            tmp.pop_back();
        }
    }
};
